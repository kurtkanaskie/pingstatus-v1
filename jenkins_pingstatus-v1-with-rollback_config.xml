<?xml version='1.0' encoding='UTF-8'?>
<maven2-moduleset plugin="maven-plugin@2.16">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/kurtkanaskie/pingstatus-v1.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>**</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>* * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <rootModule>
    <groupId>apigee</groupId>
    <artifactId>pingstatus-v1</artifactId>
  </rootModule>
  <goals>install -P${EdgeProfile} -Ddeployment.suffix=${EdgeDeploySuffix} -Dapigee.org=${EdgeOrg} -Dapigee.env=${EdgeEnv} -Dapi.northbound.domain=${EdgeNorthboundDomain} -Dapigee.username=${EdgeInstallUsername} -Dapigee.password=${EdgeInstallPassword} -Dapigee.config.options=${EdgeConfigOptions} -Dapigee.config.dir=target/resources/edge -Dapigee.config.exportDir=target/test/integration -Dcommit=&quot;${GIT_COMMIT} via Jenkins&quot; -Dbranch=${GIT_BRANCH}</goals>
  <aggregatorStyleBuild>true</aggregatorStyleBuild>
  <incrementalBuild>false</incrementalBuild>
  <ignoreUpstremChanges>true</ignoreUpstremChanges>
  <ignoreUnsuccessfulUpstreams>false</ignoreUnsuccessfulUpstreams>
  <archivingDisabled>false</archivingDisabled>
  <siteArchivingDisabled>false</siteArchivingDisabled>
  <fingerprintingDisabled>false</fingerprintingDisabled>
  <resolveDependencies>false</resolveDependencies>
  <processPlugins>false</processPlugins>
  <mavenValidationLevel>-1</mavenValidationLevel>
  <runHeadless>false</runHeadless>
  <disableTriggerDownstreamProjects>false</disableTriggerDownstreamProjects>
  <blockTriggerWhenBuilding>true</blockTriggerWhenBuilding>
  <settings class="jenkins.mvn.DefaultSettingsProvider"/>
  <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
  <reporters/>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.16">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>0ac8d57a-e305-4d52-beef-f9ba87a81365</credentialsId>
          <usernameVariable>EdgeInstallUsername</usernameVariable>
          <passwordVariable>EdgeInstallPassword</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <jenkins.plugins.nodejs.NodeJSBuildWrapper plugin="nodejs@1.2.6">
      <nodeJSInstallationName>nodejs-6.11.5</nodeJSInstallationName>
    </jenkins.plugins.nodejs.NodeJSBuildWrapper>
  </buildWrappers>
  <prebuilders>
    <hudson.tasks.Shell>
      <command># mvn -v
# which mvn
npm -version
node -v
# java -version

# Sets EdgeOrg, EdgeEnv and EdgeProxy
./set-edge-env-values.sh &gt; edge.properties

cat edge.properties

</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>edge.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>PreviousRev=`./get-deployed-revision.sh`
echo PreviousRev=$PreviousRev &gt; revision.properties</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>revision.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </prebuilders>
  <postbuilders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.2">
        <worstResult>
          <name>FAILURE</name>
          <ordinal>2</ordinal>
          <color>RED</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>FAILURE</name>
          <ordinal>2</ordinal>
          <color>RED</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash -x
PostRev=`./get-deployed-revision.sh`
echo PostRev=$PostRev

if test &quot;$PreviousRev&quot; == &quot;$PostRev&quot;
then
	echo &quot;WARNING: build failed and existing revision $PreviousRev is still deployed&quot;
else
	echo &quot;WARNING: build failed reverting from $PostRev to $PreviousRev&quot;
    ./deploy-previous-revision.sh
    CurrentRev=`./get-deployed-revision.sh`
    echo &quot;WARNING: Deployed version is confirmed to be: $CurrentRev&quot;
fi</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </postbuilders>
  <runPostStepsIfResult>
    <name>FAILURE</name>
    <ordinal>2</ordinal>
    <color>RED</color>
    <completeBuild>true</completeBuild>
  </runPostStepsIfResult>
</maven2-moduleset>